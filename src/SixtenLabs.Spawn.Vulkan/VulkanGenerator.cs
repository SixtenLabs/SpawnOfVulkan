using AutoMapper;
using SixtenLabs.Spawn.Vulkan.Spec;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace SixtenLabs.Spawn.Vulkan
{
	public class VulkanGenerator
	{
		public VulkanGenerator(IEnumerable<ICreator> creators, ISpawnService spawn, ISpawnSpec<VkRegistry> spawnSpec, IMapper mapper)
		{
			Creators = creators;
			Spawn = spawn;
			SpawnSpec = spawnSpec;
			Mapper = mapper;
		}

		private void SetupGeneratedComments()
		{
			GeneratedComments.Add("*** Do Not Edit ***");
			GeneratedComments.Add("This file was generated by the Spawn Code Generator.");
			GeneratedComments.Add("https://github.com/SixtenLabs/Spawn");
			GeneratedComments.Add(string.Empty);
			GeneratedComments.Add("Generated from the vk.xml registry file from Khronos Group.");
			GeneratedComments.Add("https://raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/1.0/src/spec/vk.xml");
			GeneratedComments.Add(string.Empty);
		}

		private void Initialize()
		{
			Spawn.Initialize(@"C:\Users\pglas\Documents\GitHub\SixtenLabs\SpawnOfVulkan\SpawnOfVulkan.sln");
			SpawnSpec.ProcessRegistry();
			SetupGeneratedComments();
			Console.WriteLine("Spawn Vulkan Generator Initialized, processing has begun.");
		}

		private void MapTypes()
		{
			foreach (var regType in SpawnSpec.SpecTree.TypeStructs)
			{
				var specTypeDefinition = Mapper.Map<VkTypeStruct, SpecTypeDefinition>(regType);
				SpawnSpec.AddSpecTypeDefinition(specTypeDefinition);
			}

			foreach (var enumValueType in SpawnSpec.SpecTree.Enums.SelectMany(x => x.Values))
			{
				var specTypeDefinition = Mapper.Map<VkEnumValue, SpecTypeDefinition>(enumValueType);
				SpawnSpec.AddSpecTypeDefinition(specTypeDefinition);
			}

			foreach (var regCommand in SpawnSpec.SpecTree.Commands)
			{
				var specTypeDefinition = Mapper.Map<VkCommand, SpecTypeDefinition>(regCommand);
				SpawnSpec.AddSpecTypeDefinition(specTypeDefinition);
			}

			Console.WriteLine($"Mapped {SpawnSpec.SpecTypeCount} types.");
		}

		private void Rewrite()
		{
			var orderedCreators = Creators.Where(x => !x.Off).OrderBy(x => x.Order);

			foreach (var creator in orderedCreators)
			{
				Console.WriteLine($"Rewriting {creator.Name} files.");
				var count = creator.Rewrite();
				Console.WriteLine($"Rewrote {count} {creator.Name} files.");
			}
		}

		private void Build()
		{
			foreach (var creator in Creators.Where(x => !x.Off).OrderBy(x => x.Order))
			{
				Console.WriteLine($"Building {creator.Name} definition files.");
				var count = creator.Build(Mapper);
				Console.WriteLine($"Building {count} {creator.Name} definition files.");
			}
		}

		private void Generate()
		{
			foreach (var creator in Creators.Where(x => !x.Off))
			{
				creator.TargetSolution = "SixtenLabs.SpawnOfVulkan";
				creator.TargetNamespace = "SixtenLabs.SpawnOfVulkan";
				creator.GeneratedComments.AddRange(GeneratedComments);
				Console.WriteLine($"Creating {creator.Name} files.");
				var count = creator.Create();
				Console.WriteLine($"Created {count} {creator.Name} files.");
			}
		}

		public void Start()
		{
			Initialize();
			MapTypes();
			Build();
			Rewrite();
			Generate();
		}

		private IEnumerable<ICreator> Creators { get; }

		private XElement Registry { get; set; }

		private ISpawnService Spawn { get; }

		private ISpawnSpec<VkRegistry> SpawnSpec { get; }

		private List<string> GeneratedComments { get; } = new List<string>();

		private IMapper Mapper { get; }
	}
}
